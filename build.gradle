import com.testvagrant.optimus.helpers.DeviceHelper
import groovyx.gpars.GParsPool
import net.masterthought.cucumber.ReportBuilder
import net.masterthought.cucumber.Configuration


import java.text.DateFormat

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'maven'



buildscript {

    repositories {
        mavenLocal()
        maven {
            url "http://api.genymotion.com/repositories/releases/"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }

        mavenCentral()

    }

    dependencies {
        classpath "org.codehaus.gpars:gpars:1.2.1"
        classpath "net.masterthought:cucumber-reporting:3.3.0"
        classpath "gradle.plugin.com.tv.gradle:CukeIT-Parallel-Generator:1.0-SNAPSHOT"
        classpath "com.testvagrant.optimus:optimus:1.0-SNAPSHOT"
//        classpath files("libs/optimus-all-1.0-SNAPSHOT.jar")

    }

}


apply plugin: "com.tv.gradle.cukeGenerator"

repositories {
    mavenLocal()
    mavenCentral()
}

ext.cukesVersion = '1.2.4'

dependencies {
    compile group: 'info.cukes', name: 'cucumber-junit', version: "$cukesVersion"
    compile group: 'info.cukes', name: 'cucumber-core', version: "$cukesVersion"
    compile group: 'info.cukes', name: 'cucumber-java8', version: "$cukesVersion"

    compile 'org.codehaus.groovy:groovy-all:2.2.0'
    compile('org.seleniumhq.selenium:selenium-java:2.53.1')
    compile 'cglib:cglib:3.2.4'


    compile('com.testvagrant.optimus:optimus:1.0-SNAPSHOT') {
        changing true
    }

//        compile files("libs/optimus-all-1.0-SNAPSHOT.jar")
    testCompile('com.google.inject:guice:3.0')
    testCompile(group: 'com.googlecode.lambdaj', name: 'lambdaj', version: '2.3.3')
    testCompile(group: 'org.json', name: 'json', version: '20131018')
}

task cukeGenerator(type: com.tv.gradle.GenerateTask) {
    def tags = tagsToRun(System.getProperty("tags"))
    cukeParallelPlugin.tags = tags
    cukeParallelPlugin.outputDirectory = new File("${project.projectDir}/src/test/java/generated-test-sources/cucumber")
    cukeParallelPlugin.cucumberOutputDir = "target/cucumber-parallel"
}

def tagsToRun(String tagPointer) {
    Properties props = new Properties()
    props.load(new FileInputStream("src/test/resources/tagFile.properties"))
    if (tagPointer != null)
        return props.get(tagPointer)
}

task optimusSetup(type: JavaExec, dependsOn: 'classes') {
    main = 'com.testvagrant.optimus.OptimusMain'
    classpath = sourceSets.test.runtimeClasspath
}

def String getAppJson(String fileName) {
    def file = new File('src/test/resources/' + fileName)
    if (file.exists()) {
        return file.text
    }
    return ''
}


task runFragmentation(dependsOn: ['optimusSetup', 'classes']) {
    doLast {
        List<String> udidList = new DeviceHelper(getAppJson(System.getProperty("testFeed") + ".json")).getConnectedDevicesMatchingRunCriteria()
        println udidList
        runDeviceFragmentation(udidList)
    }
}

private String updateReportFileName(String name) {
    String[] deviceIdString = name.split(":");
    return deviceIdString.length > 1 ? "emulator_" + deviceIdString[0].substring(deviceIdString[0].lastIndexOf(".") + 1) : name;
}


def runDeviceFragmentation(List<String> udidList) {
    def size = udidList.size()
    println "Total devices -- " + size
    GParsPool.withPool(size) {
        udidList.eachParallel { String udid ->

            javaexec {
                main = "cucumber.api.cli.Main"
                classpath = sourceSets.test.runtimeClasspath
                args = ["-p", "pretty", "-p", ("json:${reporting.baseDir}/cucumber/" + updateReportFileName(udid) + ".json"), "--glue", "steps", "-t", "@helloOptimus",
                        "${project.projectDir}/src/test/resources/features"]
                systemProperties = [
                        "testFeed": System.getProperty("testFeed"),
                        "udid"    : udid,
                        "runMode" : "Fragmentation"
                ]
            }
            println("Scenario output: ${reporting.baseDir}/cucumber/${udid}.log ")
        }
    }

}


test {
    exclude '**/*IT.class'
}


task(mergeReport, dependsOn: jar, type: JavaExec) {
    main = 'com.testvagrant.optimus.entity.reportParser.ReporterMain'
    classpath = sourceSets.test.runtimeClasspath
}



task runInParallel(type: Test, dependsOn: ['clean', 'build', 'cukeGenerator', 'optimusSetup']) {
doLast {
    if (System.getProperty("testFeed") != null)
        maxParallelForks = new DeviceHelper(getAppJson(System.getProperty("testFeed") + ".json")).getConnectedDevicesMatchingRunCriteria().size()
    println "number of forks -- " + maxParallelForks

    systemProperty 'tags', System.getProperty("tags")
    systemProperty 'testFeed', System.getProperty("testFeed")
    systemProperty 'runMode', "Distribution"

    cukeGenerator.mustRunAfter clean
    build.mustRunAfter cukeGenerator

    classpath = sourceSets.test.runtimeClasspath
}

}

task generateFragmentationReport() {
    doLast {
        def jsonReports = fileTree(dir: "${reporting.baseDir}/cucumber/").include '**/*.json'.toString()
        File reportOutputDirectory = new File("${reporting.baseDir}/cucumber");

        List<String> jsonReportFiles = new ArrayList<String>();
        jsonReports.each { File file ->
            jsonReportFiles.add("${reporting.baseDir}/cucumber/${file.name}".toString());
        }

        String buildNumber = DateFormat.instance.format(new Date())
        String projectName = "cucumberProject";
        boolean runWithJenkins = false;
        boolean parallelTesting = true;

        Configuration configuration = new Configuration(reportOutputDirectory, projectName);
//optional configuration
        configuration.setParallelTesting(parallelTesting);
        configuration.setRunWithJenkins(runWithJenkins);
        configuration.setBuildNumber(buildNumber);


        ReportBuilder reportBuilder = new ReportBuilder(jsonReportFiles, configuration);
        reportBuilder.generateReports();

        println("\nReport available on: ${reporting.baseDir}/cucumber/feature-overview.html")
    }
}



runInParallel.finalizedBy(mergeReport)
runFragmentation.finalizedBy(generateFragmentationReport)




